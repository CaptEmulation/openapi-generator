#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include "apiClient.h"
#include "cJSON.h"
{{#imports}}{{{import}}}
{{/imports}}

#define MAX_BUFFER_LENGTH 4096
#define intToStr(dst, src) \
    do {\
    char dst[64];\
    snprintf(dst, 64, "%ld", (long int)(src));\
}while(0)

{{#operations}}
{{#operation}}
{{#summary}}
// {{{summary}}}
//
{{/summary}}
{{#notes}}
// {{{notes}}}
//
{{/notes}}
{{#returnType}}{{#returnTypeIsPrimitive}}{{{.}}}{{/returnTypeIsPrimitive}}{{^returnTypeIsPrimitive}}{{{.}}}_t{{/returnTypeIsPrimitive}}{{/returnType}}{{^returnType}}void{{/returnType}} *{{{classname}}}_{{{operationId}}}(apiClient_t *apiClient{{#allParams}}, {{{dataType}}}{{#isPrimitiveType}}{{#isString}}*{{/isString}}{{/isPrimitiveType}}{{^isPrimitiveType}}_t*{{/isPrimitiveType}} {{baseName}}{{/allParams}}) {
    list_t    *localVarQueryParameters = list_create();
    list_t    *localVarHeaderParameters = list_create();
    list_t    *localVarFormParameters = list_create();
    char      *localVarBodyParameters;

    // create the path
    char *localVarPath = malloc(MAX_BUFFER_LENGTH);
    snprintf(localVarPath, MAX_BUFFER_LENGTH, "{{{path}}}");

    {{#pathParams}}
    // TODO path parameter {{paramName}} ({{baseName}}) not yet supported
    // TODO base path = {{{basePath}}}


    {{#isLong}}
        char* baseNameModToReplace = malloc(sizeof({{baseName}})+3); //baseNameMod free not yet implemented
        snprintf(baseNameModToReplace, strlen("{{baseName}}")+3, "%s%s%s", "{", "{{baseName}}", "}");
    char* baseNameMod = malloc(sizeof({{baseName}})+2); //baseNameMod free not yet implemented
    snprintf(baseNameMod, sizeof({{baseName}})+3, "%s%li%s", "{", {{baseName}}, "}");
    char buff[64];
    intToStr(buf, {{baseName}});
    localVarPath = strReplace(localVarPath, baseNameModToReplace, buff);
      //  localVarPath = buff;
    {{/isLong}}
    {{#isString}}
        char* baseNameModToReplace = malloc(strlen({{baseName}})+2); //baseNameMod free not yet implemented
        snprintf(baseNameModToReplace, strlen({{baseName}})+3, "%s%s%s", "{", "{{baseName}}", "}");
    char* baseNameMod = malloc(strlen({{baseName}})+2); //baseNameMod free not yet implemented
    snprintf(baseNameMod, strlen({{baseName}})+3, "%s%s%s", "{", {{baseName}}, "}");
    localVarPath = strReplace(localVarPath, baseNameModToReplace, {{baseName}});
        //localVarPath = "{{baseName}}";
    {{/isString}}

    {{/pathParams}}

    {{#headerParams}}
    // TODO header parameters
    // header parameter {{paramName}} ({{baseName}}) not yet supported
        if ({{baseName}})
        {
            list_addElement(localVarHeaderParameters,{{baseName}});
         }
    {{/headerParams}}

    {{#queryParams}}
    // TODO query parameters
    // query parameter {{paramName}} ({{baseName}}) not yet supported
    //char *{{baseName}}Query = malloc(MAX_BUFFER_LENGTH);
        {{#isListContainer}}
            if ({{baseName}})
        {{/isListContainer}}
        {{^isListContainer}}
            if ({{baseName}})
        {{/isListContainer}}
        {
        {{#isListContainer}}
           //notstring
           localVarQueryParameters = {{{baseName}}};
          //  list_t *{{{baseName}}}Item = list_create();
          //  list_ForEach({{{baseName}}}Item, {{{baseName}}}) {
          //  list_addElement(localVarQueryParameters,{{baseName}}Item);
          //  }
        {{/isListContainer}}
        {{^isListContainer}}
            //string
            list_addElement(localVarQueryParameters,{{baseName}});
        {{/isListContainer}}
        }
    {{/queryParams}}

    {{#formParams}}
    // TODO form parameters
    // form parameter {{paramName}} ({{baseName}}) not yet supported
    {{#isFile}}
      //  if ({{baseName}} && *{{baseName}} != NULL)
    {{/isFile}}
    {{^isFile}}
        if ({{baseName}})
    {{/isFile}}
    {

        {{#isFile}}
          //  list_addElement(localVarFormParameters,{{baseName}}); //notstring
        {{/isFile}}
        {{^isFile}}
            list_addElement(localVarFormParameters,{{baseName}}); //String
        {{/isFile}}
    }


    {{/formParams}}
    {{#bodyParam}}
    // JSON HTTP Request - {{{baseName}}}
    {{#isListContainer}}
        //notstring
        localVarQueryParameters = {{{baseName}}};
        //list_t *{{{baseName}}}Item = list_create();
        //list_ForEach({{{baseName}}}Item, {{{baseName}}}) {
        //list_addElement(localVarQueryParameters,{{baseName}}Item);
        //}
    {{/isListContainer}}
    {{^isListContainer}}
        //string
        cJSON *{{{paramName}}}JSONObject;
        {{{paramName}}}JSONObject = {{baseName}}_convertToJSON({{baseName}});
        localVarBodyParameters = cJSON_Print({{{paramName}}}JSONObject);
    {{/isListContainer}}

    {{/bodyParam}}



    apiClient_invoke(apiClient,
                    {{#tags}}
                    "{{name}}",
                    {{/tags}}
                    localVarPath,
                    localVarQueryParameters,
                    localVarHeaderParameters,
                    localVarFormParameters,
                    localVarBodyParameters,
                    "{{{httpMethod}}}");

    //free(apiClient->dataReceived);
   // free(localVarPath);
    {{#allParams}}
        {{^bodyParam}}
            {{#isString}}
                //free({{{baseName}}});
            {{/isString}}
        {{/bodyParam}}
        {{#bodyParam}}
            //free(localVarBodyParameters);
            //cJSON_Delete({{{paramName}}}JSONObject);
        {{/bodyParam}}
    {{/allParams}}

   {{#returnType}}
   {{#returnTypeIsPrimitive}}
   //primitive reutrn type
   {{/returnTypeIsPrimitive}}
   {{^returnTypeIsPrimitive}}
   {{#returnContainer}}
    cJSON *{{{baseName}}};
    cJSON *{{classname}}JSON = cJSON_Parse(apiClient->dataReceived);
    //cJSON *{{{baseName}}}JSON = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{{baseName}}}");
    if(!cJSON_IsArray({{{classname}}}JSON)) {
        return 0;;//primitive container
    }
    list_t *{{{baseName}}}List = list_create();

    cJSON_ArrayForEach({{{baseName}}}, {{{classname}}}JSON)
    {
        if(!cJSON_IsObject({{{baseName}}}))
        {
            return 0;;
        }
       char *JSONToChar = cJSON_Print({{{baseName}}});
        list_addElement({{{baseName}}}List , JSONToChar);
    }
    return {{{baseName}}}List;
   {{/returnContainer}}
   {{^returnContainer}}
   //nonprimitive return type
   {{{returnBaseType}}}_t *localVar{{{returnType}}} = {{{returnBaseType}}}_parseFromJSON(apiClient->dataReceived);
   if(localVar{{{returnType}}} == NULL) {
   return 0;
   } else {
   //cJSON *jsonObject = {{baseName}}_convertToJSON(localVar{{{returnType}}});
   //cJSON_Delete(jsonObject);
   }

   return localVar{{{returnType}}};
   {{/returnContainer}}

   {{/returnTypeIsPrimitive}}

   {{/returnType}}
   {{^returnType}}
  
   {{/returnType}}

}

{{/operation}}
{{/operations}}


