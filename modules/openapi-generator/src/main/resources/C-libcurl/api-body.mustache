#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include "apiClient.h"
#include "cJSON.h"
#include "keyValuePair.h"
{{#imports}}{{{import}}}
{{/imports}}

#define MAX_BUFFER_LENGTH 4096
#define intToStr(dst, src) \
    do {\
    char dst[256];\
    snprintf(dst, 256, "%ld", (long int)(src));\
}while(0)

{{#operations}}
{{#operation}}
{{#summary}}
// {{{summary}}}
//
{{/summary}}
{{#notes}}
// {{{notes}}}
//
{{/notes}}
{{#returnType}}{{#returnTypeIsPrimitive}}{{{.}}}{{/returnTypeIsPrimitive}}{{^returnTypeIsPrimitive}}{{{.}}}_t{{/returnTypeIsPrimitive}}{{/returnType}}{{^returnType}}void{{/returnType}} *{{{classname}}}_{{{operationId}}}(apiClient_t *apiClient{{#allParams}}, {{{dataType}}}{{#isPrimitiveType}}{{#isString}}*{{/isString}}{{#isFile}}*{{/isFile}}{{/isPrimitiveType}}{{^isPrimitiveType}}_t*{{/isPrimitiveType}} {{baseName}}{{/allParams}}) {
    list_t    *localVarQueryParameters = list_create();
    list_t    *localVarHeaderParameters = list_create();
    list_t    *localVarFormParameters = list_create();
    list_t *localVarHeaderType = list_create();
    list_t *localVarContentType = list_create();
    char      *localVarBodyParameters = NULL;

    // create the path
    char *localVarPath = malloc(MAX_BUFFER_LENGTH);
    snprintf(localVarPath, MAX_BUFFER_LENGTH, "{{{path}}}");
    {{#pathParams}}

    // Path Params
    {{#isLong}}
    char* localVarToReplace = malloc(sizeof({{baseName}})+3);
    snprintf(localVarToReplace, strlen("{{baseName}}")+3, "%s%s%s", "{", "{{baseName}}", "}");

    char localVarBuff[256];
    intToStr(localVarBuff, {{baseName}});

    localVarPath = strReplace(localVarPath, localVarToReplace, localVarBuff);

    {{/isLong}}
    {{#isString}}
    char* localVarToReplace = malloc(sizeof({{baseName}})+2);
    snprintf(localVarToReplace, strlen({{baseName}})+3, "%s%s%s", "{", "{{baseName}}", "}");

    localVarPath = strReplace(localVarPath, localVarToReplace, {{baseName}});
    {{/isString}}
    {{/pathParams}}
    {{#headerParams}}

    // header parameters (TODO free function to implement)
    char *keyHeader_{{{baseName}}};
    char *valueHeader_{{{baseName}}};
    keyValuePair_t *keyPairHeader_{{baseName}} = 0;
    if ({{baseName}})
    {
        keyHeader_{{{baseName}}} = strdup("{{{baseName}}}");
        valueHeader_{{{baseName}}} = strdup({{{baseName}}});
        keyPairHeader_{{baseName}} = keyValuePair_create(keyHeader_{{{baseName}}}, valueHeader_{{{baseName}}});
        list_addElement(localVarHeaderParameters,keyPairHeader_{{baseName}});
    }
    {{/headerParams}}
    {{#queryParams}}

    // query parameters
    {{#isListContainer}}
        if ({{baseName}})
    {{/isListContainer}}
    {{^isListContainer}}
    char *keyQuery_{{{baseName}}};
    char *valueQuery_{{{baseName}}};
        keyValuePair_t *keyPairQuery_{{baseName}} = 0;
    if ({{baseName}})
    {{/isListContainer}}
    {
    {{#isListContainer}}
       //listContainer
       localVarQueryParameters = {{{baseName}}};
    {{/isListContainer}}
    {{^isListContainer}}
        //string
        keyQuery_{{{baseName}}} = strdup("{{{baseName}}}");
        valueQuery_{{{baseName}}} = strdup({{{baseName}}});
        keyPairQuery_{{baseName}} = keyValuePair_create(keyQuery_{{{baseName}}}, valueQuery_{{{baseName}}});
        list_addElement(localVarQueryParameters,keyPairQuery_{{baseName}});
    {{/isListContainer}}
    }
    {{/queryParams}}
    {{#formParams}}

    // form parameters
    {{#isFile}}
    fseek(file, 0, SEEK_END);
    long f_size = ftell(file);
    fseek(file, 0, SEEK_SET);
    char *keyForm_{{baseName}};
    FileStruct *fileVar_{{baseName}} = malloc(sizeof(FileStruct));
    keyValuePair_t *keyPairForm_{{baseName}} = 0;
    if ({{baseName}} != NULL)
    {{/isFile}}
    {{^isFile}}
    char *keyForm_{{baseName}};
    char *valueForm_{{baseName}};
    keyValuePair_t *keyPairForm_{{baseName}} = 0;
    if ({{baseName}})
    {{/isFile}}
    {
        {{#isFile}}
        keyForm_{{baseName}} = strdup("{{{baseName}}}");
        fileVar_{{baseName}}->fileData = malloc((f_size)* sizeof(char*));

        fread(fileVar_{{baseName}}->fileData, f_size, 1, file);
        fileVar_{{baseName}}->fileData[f_size] = '\0';

        fileVar_{{baseName}}->fileSize = f_size;
        char valueFile[sizeof(fileVar_{{baseName}})];

        memcpy(valueFile,&fileVar_{{baseName}}, sizeof(fileVar_{{baseName}}));

        keyPairForm_{{baseName}} = keyValuePair_create(keyForm_{{baseName}},valueFile);
        list_addElement(localVarFormParameters,keyPairForm_{{baseName}}); //file adding
        {{/isFile}}
        {{^isFile}}
        keyForm_{{baseName}} = strdup("{{{baseName}}}");
        valueForm_{{baseName}} = strdup({{baseName}});
        keyPairForm_{{baseName}} = keyValuePair_create(keyForm_{{baseName}},valueForm_{{baseName}});
        list_addElement(localVarFormParameters,keyPairForm_{{baseName}}); //String
        {{/isFile}}
    }
    {{/formParams}}
    {{#bodyParam}}

    // Body Param
    {{#isListContainer}}
    //notstring
    cJSON *localVarItemJSON_{{baseName}} = cJSON_CreateObject();
    cJSON *localVarSingleItemJSON_{{baseName}} = cJSON_AddArrayToObject(localVarItemJSON_{{baseName}}, "{{baseName}}");
    if(localVarSingleItemJSON_{{baseName}} == NULL) {
        return 0; // nonprimitive container
    }
    listEntry_t *{{baseName}}BodyListEntry;
    cJSON *localVar_{{baseName}};
    list_ForEach({{baseName}}BodyListEntry, {{baseName}}) {
        localVar_{{baseName}} = user_convertToJSON({{baseName}}BodyListEntry->data);
        if(localVar_{{baseName}} == NULL) {
        return 0;
    }
        cJSON_AddItemToArray(localVarSingleItemJSON_{{baseName}}, localVar_{{baseName}});
    }

    localVarBodyParameters = cJSON_Print(localVarItemJSON_{{baseName}});
    {{/isListContainer}}
    {{^isListContainer}}
    //string
    cJSON *localVarSingleItemJSON_{{baseName}};
    localVarSingleItemJSON_{{baseName}} = {{baseName}}_convertToJSON({{baseName}});
    localVarBodyParameters = cJSON_Print(localVarSingleItemJSON_{{baseName}});
    {{/isListContainer}}
    {{/bodyParam}}
    {{#produces}}

        list_addElement(localVarHeaderType,"{{{mediaType}}}"); //produces
    {{/produces}}
    {{#consumes}}

        list_addElement(localVarContentType,"{{{mediaType}}}"); //consumes
    {{/consumes}}

    apiClient_invoke(apiClient,
                    localVarPath,
                    localVarQueryParameters,
                    localVarHeaderParameters,
                    localVarFormParameters,
                    localVarHeaderType,
                    localVarContentType,
                    localVarBodyParameters,
                    "{{{httpMethod}}}");

   {{#returnType}}
   {{#returnTypeIsPrimitive}}
   //primitive reutrn type
   char *elementToReturn = (char*)apiClient->dataReceived;
   {{/returnTypeIsPrimitive}}
   {{^returnTypeIsPrimitive}}
   {{#returnContainer}}
    cJSON *{{classname}}localVarJSON = cJSON_Parse(apiClient->dataReceived);
    if(!cJSON_IsArray({{classname}}localVarJSON)) {
        return 0;//nonprimitive container
    }
    list_t *elementToReturn = list_create();
    cJSON *{{{baseName}}}VarJSON;
    cJSON_ArrayForEach({{{baseName}}}VarJSON, {{classname}}localVarJSON)
    {
    if(!cJSON_IsObject({{{baseName}}}VarJSON))
    {
        return 0;;
    }
    char *localVarJSONToChar = cJSON_Print({{{baseName}}}VarJSON);
    list_addElement(elementToReturn , localVarJSONToChar);
    }

    cJSON_Delete( {{classname}}localVarJSON);
    cJSON_Delete( {{{baseName}}}VarJSON);
    {{/returnContainer}}
    {{^returnContainer}}
    //nonprimitive not container
    {{{returnBaseType}}}_t *elementToReturn = {{{returnBaseType}}}_parseFromJSON(apiClient->dataReceived);
    if(elementToReturn == NULL) {
        return 0;
    }

    {{/returnContainer}}
    //return type
    {{/returnTypeIsPrimitive}}
    apiClient_free(apiClient);
    list_free(localVarQueryParameters);
    list_free(localVarHeaderParameters);
    list_free(localVarFormParameters);
    list_free(localVarHeaderType);
    list_free(localVarContentType);
    free(localVarPath);
    {{#pathParams}}
    free(localVarToReplace);
    {{/pathParams}}
    {{#headerParams}}
    {{#isString}}
    free(keyHeader_{{{baseName}}});
    free(valueHeader_{{{baseName}}});
    {{/isString}}
    free(keyPairHeader_{{baseName}});
    {{/headerParams}}
    {{#bodyParams}}
    {{#isListContainer}}
    cJSON_Delete(localVarItemJSON_{{baseName}});
    cJSON_Delete(localVarSingleItemJSON_{{baseName}});
    cJSON_Delete(localVar_{{baseName}});
    free(localVarBodyParameters);
    {{/isListContainer}}
    {{^isListContainer}}
    {{#isString}}
    cJSON_Delete(localVarSingleItemJSON_{{baseName}});
    free(localVarBodyParameters);
    {{/isString}}
    {{/isListContainer}}
    {{/bodyParams}}
    {{#queryParams}}
    {{^isListContainer}}
    {{#isString}}
    free(keyQuery_{{{baseName}}});
    free(valueQuery_{{{baseName}}});
    {{/isString}}
    {{/isListContainer}}
    {{/queryParams}}
    {{#formParams}}
    {{#isFile}}
    free(keyForm_{{{baseName}}});
    free(fileVar_{{baseName}}->fileData);
    free(fileVar_{{baseName}});
    free(keyPairForm_{{baseName}});
    {{/isFile}}
    {{^isFile}}
    {{#isString}}
    free(keyForm_{{{baseName}}});
    free(valueForm_{{{baseName}}});
    free(keyPairForm_{{baseName}});
    {{/isString}}
    {{/isFile}}
    {{/formParams}}
   return elementToReturn;


    {{/returnType}}
    {{^returnType}}
    //No return type
    apiClient_free(apiClient);
    list_free(localVarQueryParameters);
    list_free(localVarHeaderParameters);
    list_free(localVarFormParameters);
    list_free(localVarHeaderType);
    list_free(localVarContentType);
    free(localVarPath);
    {{#pathParams}}
    free(localVarToReplace);
    {{/pathParams}}
    {{#headerParams}}
    free(keyPairHeader_{{baseName}});
    {{#isString}}
    free(keyHeader_{{{baseName}}});
    free(valueHeader_{{{baseName}}});
    {{/isString}}
    {{/headerParams}}
    {{#bodyParams}}
    {{#isListContainer}}
    cJSON_Delete(localVarItemJSON_{{baseName}});
    cJSON_Delete(localVarSingleItemJSON_{{baseName}});
    cJSON_Delete(localVar_{{baseName}});
    free(localVarBodyParameters);
    {{/isListContainer}}
    {{^isListContainer}}
    {{#isString}}
    cJSON_Delete(localVarSingleItemJSON_{{baseName}});
    free(localVarBodyParameters);
    {{/isString}}
    {{/isListContainer}}
    {{/bodyParams}}
    {{#queryParams}}
    {{^isListContainer}}
    {{#isString}}
    free(keyQuery_{{{baseName}}});
    free(valueQuery_{{{baseName}}});
    {{/isString}}
    {{/isListContainer}}
    {{/queryParams}}
    {{#formParams}}
    {{#isFile}}
    free(keyForm_{{{baseName}}});
    free(fileVar_{{baseName}}->fileData);
    free(fileVar_{{baseName}});
    {{/isFile}}
    {{^isFile}}
    {{#isString}}
    free(keyForm_{{{baseName}}});
    free(valueForm_{{{baseName}}});
    {{/isString}}
    {{/isFile}}
    {{/formParams}}
    {{/returnType}}

}

{{/operation}}
{{/operations}}


